dat3 <- gsub('\\\"', '"', dat2)
dat3
dat3 <- gsub('\\"', '"', dat2)
dat3
dat3 <- gsub('\"', '"', dat2)
dat3
dat3 <- str_replace_all('\"', '"', dat2)
dat3
dat <- noquote(readLines("index.html"))  # read data with readLines
dat2 <- str_replace_all(dat, "[\\r\\n\\t]+", " ")
dat3 <- str_replace_all('\"', '"', dat2)
dat3 <- str_replace_all('[\"]', '"', dat2)
dat3
dat2 <- str_replace_all(dat, "[\\r\\n\\t]+", " ")
dat3 <- str_replace_all(dat2, "[\"]", '"')
dat3
dat2
dat3[1:10]
dat2 <- noquote(str_replace_all(dat, "[\\r\\n\\t]+", " "))
dat2
dat3 <- noquote(str_replace_all(dat2, "[\"]", '"'))
dat3
insert_line_at <- function(dat, to_insert, insert_after, insert_before){
pre <- dat[1:insert_after]
post <- dat[(insert_before):length(dat)]
return(c(pre, to_insert, post))
}
dat_inserted <- insert_line_at(dat3, text_to_insert, insert_after=3)
dat_inserted <- insert_line_at(dat3, text_to_insert, insert_after=insert_after, insert_before = insert_before)
dat <- noquote(readLines("index.html"))  # read data with readLines
dat2 <- noquote(str_replace_all(dat, "[\\r\\n\\t]+", " "))
dat3 <- noquote(str_replace_all(dat2, "[\"]", '"'))
text_to_insert <- html_4
insert_after <- which(dat %in% '\t<div id=\"main\" role=\"main\" class=\"container\">\t')
insert_before <- which(grep('<div class="wrapper-footer">', dat))
grep('<div class="wrapper-footer">', dat)
grep('<div class="wrapper-footer">', dat)
insert_before <- grep('<div class="wrapper-footer">', dat3)
insert_before
insert_line_at <- function(dat, to_insert, insert_after, insert_before){
pre <- dat[1:insert_after]
post <- dat[(insert_before):length(dat)]
return(c(pre, to_insert, post))
}
dat_inserted <- insert_line_at(dat3, text_to_insert, insert_after=insert_after, insert_before = insert_before)
dat_insterted
dat_inserted
writeLines(dat_inserted, "publications/publications_test.html")
writeLines(dat_inserted, "publications/publications.html")
knitr::opts_chunk$set(echo = TRUE)
# the first time you may need to re-reun this:
#install.packages("scholar")
#install.packages("tidyverse")
#install.packages("glue")
library(scholar)
library(tidyverse)
library(glue)
# escape some special chars, german umlauts, ...
char2html <- function(x){
dictionary <- data.frame(
symbol = c("ä","ö","ü","Ä", "Ö", "Ü", "ß"),
html = c("&auml;","&ouml;", "&uuml;","&Auml;",
"&Ouml;", "&Uuml;","&szlig;"))
for(i in 1:dim(dictionary)[1]){
x <- gsub(dictionary$symbol[i],dictionary$html[i],x)
}
x
}
# my google scholar user id from my profile url
# https://scholar.google.com/citations?user=-WJKy_EAAAAJ&hl=en
MaxLarter <- "-WJKy_EAAAAJ&hl"
# pull from google
html_1 <- get_publications(MaxLarter)
# convert to htlm table - the ugly way ;)
html_2 <- html_1 %>%
as_tibble %>% arrange(desc(year)) %>%
mutate(
#    author=str_replace_all(author, " (\\S) ", "\\1 "),
author=str_replace_all(author, "([A-Z]) ([A-Z]) ", "\\1\\2 "),
author=str_replace_all(author, ", \\.\\.\\.", " et al."),
author=str_replace_all(author, "M Larter", "<b>M Larter</b>"), # make my name fat
author=str_replace_all(author, "MD Larter", "<b>MD Larter</b>") # make my name fat
) %>% split(.$year) %>%
map(function(x){
x <- x %>%
glue_data('<tr><td width="100%">{author} ({year}) <a href="https://scholar.google.com/scholar?oi=bibs&cluster={cid}&btnI=1&hl=en">{title}</a>, {journal}, {number}</td></tr>') %>%
str_replace_all("(, )+</p>", "</p>") %>%
char2html()
x <- c('<table><tbody>', x, '</tbody></table>')
return(x);
}) %>% rev
html_3 <- map2(names(html_2) %>% paste0("<h3>", ., "</h3>"), html_2, c) %>% unlist
html_4 <- c(
paste0('<p><small>Last updated <i>',
format(Sys.Date(), format="%B %d, %Y"),
'&ndash; Pulled automatically from my <a href="https://scholar.google.com/citations?user=-WJKy_EAAAAJ&hl=en">Google Scholar profile</a>. See <a href="https://thackl.github.io/automatically-update-publications-with-R-scholar">this post</a> for how it works.</small></p>'), html_3)
# write the html list to a file
# writeLines(html_4, "publications/publications.html")
dat <- noquote(readLines("index.html"))  # read data with readLines
dat2 <- noquote(str_replace_all(dat, "[\\r\\n\\t]+", " "))
dat3 <- noquote(str_replace_all(dat2, "[\"]", '"'))
text_to_insert <- html_4
insert_after <- which(dat %in% '\t<div id=\"main\" role=\"main\" class=\"container\">\t')
insert_before <- grep('<div class="wrapper-footer">', dat3)
insert_line_at <- function(dat, to_insert, insert_after, insert_before){
pre <- dat[1:insert_after]
post <- dat[(insert_before):length(dat)]
return(c(pre, to_insert, post))
}
dat_inserted <- insert_line_at(dat3, text_to_insert, insert_after=insert_after, insert_before = insert_before)
writeLines(dat_inserted, "publications/publications.html")
# escape some special chars, german umlauts, ...
char2html <- function(x){
dictionary <- data.frame(
symbol = c("ä","ö","ü","Ä", "Ö", "Ü", "ß", " ", "á", "ñ", "é"),
html = c("&auml;","&ouml;", "&uuml;","&Auml;",
"&Ouml;", "&Uuml;","&szlig;", "&nbsp;", "&aacute;", "&ntilde;", "&eacute;"))
for(i in 1:dim(dictionary)[1]){
x <- gsub(dictionary$symbol[i],dictionary$html[i],x)
}
x
}
# my google scholar user id from my profile url
# https://scholar.google.com/citations?user=-WJKy_EAAAAJ&hl=en
MaxLarter <- "-WJKy_EAAAAJ&hl"
# pull from google
html_1 <- get_publications(MaxLarter)
# convert to htlm table - the ugly way ;)
html_2 <- html_1 %>%
as_tibble %>% arrange(desc(year)) %>%
mutate(
#    author=str_replace_all(author, " (\\S) ", "\\1 "),
author=str_replace_all(author, "([A-Z]) ([A-Z]) ", "\\1\\2 "),
author=str_replace_all(author, ", \\.\\.\\.", " et al."),
author=str_replace_all(author, "M Larter", "<b>M Larter</b>"), # make my name fat
author=str_replace_all(author, "MD Larter", "<b>MD Larter</b>") # make my name fat
) %>% split(.$year) %>%
map(function(x){
x <- x %>%
glue_data('<tr><td width="100%">{author} ({year}) <a href="https://scholar.google.com/scholar?oi=bibs&cluster={cid}&btnI=1&hl=en">{title}</a>, {journal}, {number}</td></tr>') %>%
str_replace_all("(, )+</p>", "</p>") %>%
char2html()
x <- c('<table><tbody>', x, '</tbody></table>')
return(x);
}) %>% rev
html_3 <- map2(names(html_2) %>% paste0("<h3>", ., "</h3>"), html_2, c) %>% unlist
html_4 <- c(
paste0('<p><small>Last updated <i>',
format(Sys.Date(), format="%B %d, %Y"),
'&ndash; Pulled automatically from my <a href="https://scholar.google.com/citations?user=-WJKy_EAAAAJ&hl=en">Google Scholar profile</a>. See <a href="https://thackl.github.io/automatically-update-publications-with-R-scholar">this post</a> for how it works.</small></p>'), html_3)
# write the html list to a file
# writeLines(html_4, "publications/publications.html")
dat <- noquote(readLines("index.html"))  # read data with readLines
dat2 <- noquote(str_replace_all(dat, "[\\r\\n\\t]+", " "))
dat3 <- noquote(str_replace_all(dat2, "[\"]", '"'))
text_to_insert <- html_4
insert_after <- which(dat %in% '\t<div id=\"main\" role=\"main\" class=\"container\">\t')
insert_before <- grep('<div class="wrapper-footer">', dat3)
insert_line_at <- function(dat, to_insert, insert_after, insert_before){
pre <- dat[1:insert_after]
post <- dat[(insert_before):length(dat)]
return(c(pre, to_insert, post))
}
dat_inserted <- insert_line_at(dat3, text_to_insert, insert_after=insert_after, insert_before = insert_before)
writeLines(dat_inserted, "publications/publications.html")
# escape some special chars, german umlauts, ...
char2html <- function(x){
dictionary <- data.frame(
symbol = c("ä","ö","ü","Ä", "Ö", "Ü", "ß", "á", "ñ", "é"),
html = c("&auml;","&ouml;", "&uuml;","&Auml;",
"&Ouml;", "&Uuml;","&szlig;", "&aacute;", "&ntilde;", "&eacute;"))
for(i in 1:dim(dictionary)[1]){
x <- gsub(dictionary$symbol[i],dictionary$html[i],x)
}
x
}
# my google scholar user id from my profile url
# https://scholar.google.com/citations?user=-WJKy_EAAAAJ&hl=en
MaxLarter <- "-WJKy_EAAAAJ&hl"
# pull from google
html_1 <- get_publications(MaxLarter)
# convert to htlm table - the ugly way ;)
html_2 <- html_1 %>%
as_tibble %>% arrange(desc(year)) %>%
mutate(
#    author=str_replace_all(author, " (\\S) ", "\\1 "),
author=str_replace_all(author, "([A-Z]) ([A-Z]) ", "\\1\\2 "),
author=str_replace_all(author, ", \\.\\.\\.", " et al."),
author=str_replace_all(author, "M Larter", "<b>M Larter</b>"), # make my name fat
author=str_replace_all(author, "MD Larter", "<b>MD Larter</b>") # make my name fat
) %>% split(.$year) %>%
map(function(x){
x <- x %>%
glue_data('<tr><td width="100%">{author} ({year}) <a href="https://scholar.google.com/scholar?oi=bibs&cluster={cid}&btnI=1&hl=en">{title}</a>, {journal}, {number}</td></tr>') %>%
str_replace_all("(, )+</p>", "</p>") %>%
char2html()
x <- c('<table><tbody>', x, '</tbody></table>')
return(x);
}) %>% rev
html_3 <- map2(names(html_2) %>% paste0("<h3>", ., "</h3>"), html_2, c) %>% unlist
html_4 <- c(
paste0('<p><small>Last updated <i>',
format(Sys.Date(), format="%B %d, %Y"),
'&ndash; Pulled automatically from my <a href="https://scholar.google.com/citations?user=-WJKy_EAAAAJ&hl=en">Google Scholar profile</a>. See <a href="https://thackl.github.io/automatically-update-publications-with-R-scholar">this post</a> for how it works.</small></p>'), html_3)
# write the html list to a file
# writeLines(html_4, "publications/publications.html")
html_4
html_1
html_1[,]
html_1[,3]
html_1[,4]
html_1[3,]
html_1[2,]
html_1[2,1]
# my google scholar user id from my profile url
# https://scholar.google.com/citations?user=-WJKy_EAAAAJ&hl=en
MaxLarter <- "-WJKy_EAAAAJ&hl"
# pull from google
html_1 <- get_publications(MaxLarter)
# convert to htlm table - the ugly way ;)
html_2 <- html_1 %>%
as_tibble %>% arrange(desc(year)) %>%
mutate(
#    author=str_replace_all(author, " (\\S) ", "\\1 "),
author=str_replace_all(author, "([A-Z]) ([A-Z]) ", "\\1\\2 "),
author=str_replace_all(author, ", \\.\\.\\.", " et al."),
author=str_replace_all(author, "M Larter", "<b>M Larter</b>"), # make my name fat
author=str_replace_all(author, "MD Larter", "<b>MD Larter</b>") # make my name fat
) %>% split(.$year) %>%
map(function(x){
x <- x %>%
glue_data('<tr><td width="100%">{author} ({year}) <a href="https://scholar.google.com/scholar?oi=bibs&cluster={cid}&btnI=1&hl=en">{title}</a>, {journal}, {number}</td></tr>') %>%
str_replace_all("(, )+</p>", "</p>") %>%
char2html()
x <- c('<table><tbody>', x, '</tbody></table>')
return(x);
}) %>% rev
html_3 <- map2(names(html_2) %>% paste0("<h3>", ., "</h3>"), html_2, c) %>% unlist
html_4 <- c(
paste0('<p><small>Last updated <i>',
format(Sys.Date(), format="%B %d, %Y"),
'&ndash; Pulled automatically from my <a href="https://scholar.google.com/citations?user=-WJKy_EAAAAJ&hl=en">Google Scholar profile</a>. See <a href="https://thackl.github.io/automatically-update-publications-with-R-scholar">this post</a> for how it works.</small></p>'), html_3)
# write the html list to a file
# writeLines(html_4, "publications/publications.html")
dat <- noquote(readLines("index.html"))  # read data with readLines
dat2 <- noquote(str_replace_all(dat, "[\\r\\n\\t]+", " "))
dat3 <- noquote(str_replace_all(dat2, "[\"]", '"'))
text_to_insert <- html_4
insert_after <- which(dat %in% '\t<div id=\"main\" role=\"main\" class=\"container\">\t')
insert_before <- grep('<div class="wrapper-footer">', dat3)
insert_line_at <- function(dat, to_insert, insert_after, insert_before){
pre <- dat[1:insert_after]
post <- dat[(insert_before):length(dat)]
return(c(pre, to_insert, post))
}
dat_inserted <- insert_line_at(dat3, text_to_insert, insert_after=insert_after, insert_before = insert_before)
knitr::opts_chunk$set(echo = TRUE)
# the first time you may need to re-reun this:
#install.packages("scholar")
#install.packages("tidyverse")
#install.packages("glue")
library(scholar)
library(tidyverse)
library(glue)
# escape some special chars, german umlauts, ...
char2html <- function(x){
dictionary <- data.frame(
symbol = c("ä","ö","ü","Ä", "Ö", "Ü", "ß", "á", "ñ", "é"),
html = c("&auml;","&ouml;", "&uuml;","&Auml;",
"&Ouml;", "&Uuml;","&szlig;", "&aacute;", "&ntilde;", "&eacute;"))
for(i in 1:dim(dictionary)[1]){
x <- gsub(dictionary$symbol[i],dictionary$html[i],x)
}
x
}
# my google scholar user id from my profile url
# https://scholar.google.com/citations?user=-WJKy_EAAAAJ&hl=en
MaxLarter <- "-WJKy_EAAAAJ&hl"
# pull from google
html_1 <- get_publications(MaxLarter)
# convert to htlm table - the ugly way ;)
html_2 <- html_1 %>%
as_tibble %>% arrange(desc(year)) %>%
mutate(
#    author=str_replace_all(author, " (\\S) ", "\\1 "),
author=str_replace_all(author, "([A-Z]) ([A-Z]) ", "\\1\\2 "),
author=str_replace_all(author, ", \\.\\.\\.", " et al."),
author=str_replace_all(author, "M Larter", "<b>M Larter</b>"), # make my name fat
author=str_replace_all(author, "MD Larter", "<b>MD Larter</b>") # make my name fat
) %>% split(.$year) %>%
map(function(x){
x <- x %>%
glue_data('<tr><td width="100%">{author} ({year}) <a href="https://scholar.google.com/scholar?oi=bibs&cluster={cid}&btnI=1&hl=en">{title}</a>, {journal}, {number}</td></tr>') %>%
str_replace_all("(, )+</p>", "</p>") %>%
char2html()
x <- c('<table><tbody>', x, '</tbody></table>')
return(x);
}) %>% rev
html_3 <- map2(names(html_2) %>% paste0("<h3>", ., "</h3>"), html_2, c) %>% unlist
html_4 <- c(
paste0('<p><small>Last updated <i>',
format(Sys.Date(), format="%B %d, %Y"),
'&ndash; Pulled automatically from my <a href="https://scholar.google.com/citations?user=-WJKy_EAAAAJ&hl=en">Google Scholar profile</a>. See <a href="https://thackl.github.io/automatically-update-publications-with-R-scholar">this post</a> for how it works.</small></p>'), html_3)
# write the html list to a file
# writeLines(html_4, "publications/publications.html")
dat <- noquote(readLines("index.html"))  # read data with readLines
dat2 <- noquote(str_replace_all(dat, "[\\r\\n\\t]+", " "))
dat3 <- noquote(str_replace_all(dat2, "[\"]", '"'))
text_to_insert <- html_4
insert_after <- which(dat %in% '\t<div id=\"main\" role=\"main\" class=\"container\">\t')
insert_before <- grep('<div class="wrapper-footer">', dat3)
insert_line_at <- function(dat, to_insert, insert_after, insert_before){
pre <- dat[1:insert_after]
post <- dat[(insert_before):length(dat)]
return(c(pre, to_insert, post))
}
dat_inserted <- insert_line_at(dat3, text_to_insert, insert_after=insert_after, insert_before = insert_before)
insert_after
dat
insert_after <- which(dat %in% '\t<div id="main" role="main" class="container">')
insert_after
dat <- noquote(readLines("index.html"))  # read data with readLines
dat2 <- noquote(str_replace_all(dat, "[\\r\\n\\t]+", " "))
dat3 <- noquote(str_replace_all(dat2, "[\"]", '"'))
text_to_insert <- html_4
insert_after <- which(dat %in% '\t<div id="main" role="main" class="container">')
insert_before <- grep('<div class="wrapper-footer">', dat3)
insert_line_at <- function(dat, to_insert, insert_after, insert_before){
pre <- dat[1:insert_after]
post <- dat[(insert_before):length(dat)]
return(c(pre, to_insert, post))
}
dat_inserted <- insert_line_at(dat3, text_to_insert, insert_after=insert_after, insert_before = insert_before)
writeLines(dat_inserted, "publications/publications.html")
text_to_insert
dat4 = gsub("\u00A0", "", dat3)
dat4
dat_inserted2 = gsub("\u00A0", "THISISTHEWHITESPACELALALALALA", dat_inserted)
dat_inserted2
dat_inserted2 = gsub("\u00A0", " ", dat_inserted)
writeLines(dat_inserted, "publications/publications.html")
writeLines(dat_inserted2, "publications/publications.html")
# escape some special chars, german umlauts, ...
char2html <- function(x){
dictionary <- data.frame(
symbol = c("ä","ö","ü","Ä", "Ö", "Ü", "ß", "á", "ñ", "é"),
html = c("&auml;","&ouml;", "&uuml;","&Auml;",
"&Ouml;", "&Uuml;","&szlig;", "&aacute;", "&ntilde;", "&eacute;"))
for(i in 1:dim(dictionary)[1]){
x <- gsub(dictionary$symbol[i],dictionary$html[i],x)
}
x
}
# escape some special chars, german umlauts, ...
char2html <- function(x){
dictionary <- data.frame(
symbol = c("ä","ö","ü","Ä", "Ö", "Ü", "ß", "á", "ñ", "é"),
html = c("&auml;","&ouml;", "&uuml;","&Auml;",
"&Ouml;", "&Uuml;","&szlig;", "&aacute;", "&ntilde;", "&eacute;"))
for(i in 1:dim(dictionary)[1]){
x <- gsub(dictionary$symbol[i],dictionary$html[i],x)
}
x
}
# my google scholar user id from my profile url
# https://scholar.google.com/citations?user=-WJKy_EAAAAJ&hl=en
MaxLarter <- "-WJKy_EAAAAJ&hl"
# pull from google
html_1 <- get_publications(MaxLarter)
# convert to htlm table - the ugly way ;)
html_2 <- html_1 %>%
as_tibble %>% arrange(desc(year)) %>%
mutate(
#    author=str_replace_all(author, " (\\S) ", "\\1 "),
author=str_replace_all(author, "([A-Z]) ([A-Z]) ", "\\1\\2 "),
author=str_replace_all(author, ", \\.\\.\\.", " et al."),
author=str_replace_all(author, "M Larter", "<b>M Larter</b>"), # make my name fat
author=str_replace_all(author, "MD Larter", "<b>MD Larter</b>") # make my name fat
) %>% split(.$year) %>%
map(function(x){
x <- x %>%
glue_data('<tr><td width="100%">{author} ({year}) <a href="https://scholar.google.com/scholar?oi=bibs&cluster={cid}&btnI=1&hl=en" target="_blank">{title}</a>, {journal}, {number}</td></tr>') %>%
str_replace_all("(, )+</p>", "</p>") %>%
char2html()
x <- c('<table><tbody>', x, '</tbody></table>')
return(x);
}) %>% rev
html_3 <- map2(names(html_2) %>% paste0("<h3>", ., "</h3>"), html_2, c) %>% unlist
html_4 <- c(
paste0('<p><small>Last updated <i>',
format(Sys.Date(), format="%B %d, %Y"),
'&ndash; Pulled automatically from my <a href="https://scholar.google.com/citations?user=-WJKy_EAAAAJ&hl=en">Google Scholar profile</a>. See <a href="https://thackl.github.io/automatically-update-publications-with-R-scholar" target="_blank>this post</a> for how it works.</small></p>'), html_3)
# write the html list to a file
# writeLines(html_4, "publications/publications.html")
dat <- noquote(readLines("index.html"))  # read data with readLines
dat2 <- noquote(str_replace_all(dat, "[\\r\\n\\t]+", " "))
dat3 <- noquote(str_replace_all(dat2, "[\"]", '"'))
text_to_insert <- html_4
insert_after <- which(dat %in% '\t<div id="main" role="main" class="container">')
insert_before <- grep('<div class="wrapper-footer">', dat3)
insert_line_at <- function(dat, to_insert, insert_after, insert_before){
pre <- dat[1:insert_after]
post <- dat[(insert_before):length(dat)]
return(c(pre, to_insert, post))
}
dat_inserted <- insert_line_at(dat3, text_to_insert, insert_after=insert_after, insert_before = insert_before)
dat_inserted2 = gsub("\u00A0", " ", dat_inserted) # this removes the unbreakable space that appeared for some unkown reason...
writeLines(dat_inserted2, "publications/publications.html") # write to Publication list pages
# my google scholar user id from my profile url
# https://scholar.google.com/citations?user=-WJKy_EAAAAJ&hl=en
MaxLarter <- "-WJKy_EAAAAJ&hl"
# pull from google
html_1 <- get_publications(MaxLarter)
# convert to htlm table - the ugly way ;)
html_2 <- html_1 %>%
as_tibble %>% arrange(desc(year)) %>%
mutate(
#    author=str_replace_all(author, " (\\S) ", "\\1 "),
author=str_replace_all(author, "([A-Z]) ([A-Z]) ", "\\1\\2 "),
author=str_replace_all(author, ", \\.\\.\\.", " et al."),
author=str_replace_all(author, "M Larter", "<b>M Larter</b>"), # make my name fat
author=str_replace_all(author, "MD Larter", "<b>MD Larter</b>") # make my name fat
) %>% split(.$year) %>%
map(function(x){
x <- x %>%
glue_data('<tr><td width="100%">{author} ({year}) <a href="https://scholar.google.com/scholar?oi=bibs&cluster={cid}&btnI=1&hl=en" target="_blank">{title}</a>, {journal}, {number}</td></tr>') %>%
str_replace_all("(, )+</p>", "</p>") %>%
char2html()
x <- c('<table><tbody>', x, '</tbody></table>')
return(x);
}) %>% rev
html_3 <- map2(names(html_2) %>% paste0("<h3>", ., "</h3>"), html_2, c) %>% unlist
html_4 <- c(
paste0('<p><small>Last updated <i>',
format(Sys.Date(), format="%B %d, %Y"),
'&ndash; Pulled automatically from my <a href="https://scholar.google.com/citations?user=-WJKy_EAAAAJ&hl=en">Google Scholar profile</a>. See <a href="https://thackl.github.io/automatically-update-publications-with-R-scholar" target="_blank">this post</a> for how it works. See the code adapted to my usage <a href = "https://github.com/MaxLarter/maxlarter.github.io/blob/master/.R.Rmd" target="_blank">here</a></small></p>'), html_3)
# write the html list to a file
# writeLines(html_4, "publications/publications.html")
dat <- noquote(readLines("index.html"))  # read data with readLines
dat2 <- noquote(str_replace_all(dat, "[\\r\\n\\t]+", " "))
dat3 <- noquote(str_replace_all(dat2, "[\"]", '"'))
text_to_insert <- html_4
insert_after <- which(dat %in% '\t<div id="main" role="main" class="container">')
insert_before <- grep('<div class="wrapper-footer">', dat3)
insert_line_at <- function(dat, to_insert, insert_after, insert_before){
pre <- dat[1:insert_after]
post <- dat[(insert_before):length(dat)]
return(c(pre, to_insert, post))
}
dat_inserted <- insert_line_at(dat3, text_to_insert, insert_after=insert_after, insert_before = insert_before)
dat_inserted2 = gsub("\u00A0", " ", dat_inserted) # this removes the unbreakable space that appeared for some unkown reason...
writeLines(dat_inserted2, "publications/publications.html") # write to Publication list pages
# the first time you may need to re-reun this:
#install.packages("scholar")
#install.packages("tidyverse")
#install.packages("glue")
library(scholar)
library(tidyverse)
library(glue)
# escape some special chars, german umlauts, ...
char2html <- function(x){
dictionary <- data.frame(
symbol = c("ä","ö","ü","Ä", "Ö", "Ü", "ß", "á", "ñ", "é"),
html = c("&auml;","&ouml;", "&uuml;","&Auml;",
"&Ouml;", "&Uuml;","&szlig;", "&aacute;", "&ntilde;", "&eacute;"))
for(i in 1:dim(dictionary)[1]){
x <- gsub(dictionary$symbol[i],dictionary$html[i],x)
}
x
}
# my google scholar user id from my profile url
# https://scholar.google.com/citations?user=-WJKy_EAAAAJ&hl=en
MaxLarter <- "-WJKy_EAAAAJ&hl"
# pull from google
html_1 <- get_publications(MaxLarter)
# convert to htlm table - the ugly way ;)
html_2 <- html_1 %>%
as_tibble %>% arrange(desc(year)) %>%
mutate(
#    author=str_replace_all(author, " (\\S) ", "\\1 "),
author=str_replace_all(author, "([A-Z]) ([A-Z]) ", "\\1\\2 "),
author=str_replace_all(author, ", \\.\\.\\.", " et al."),
author=str_replace_all(author, "M Larter", "<b>M Larter</b>"), # make my name fat
author=str_replace_all(author, "MD Larter", "<b>MD Larter</b>") # make my name fat
) %>% split(.$year) %>%
map(function(x){
x <- x %>%
glue_data('<tr><td width="100%">{author} ({year}) <a href="https://scholar.google.com/scholar?oi=bibs&cluster={cid}&btnI=1&hl=en" target="_blank">{title}</a>, {journal}, {number}</td></tr>') %>%
str_replace_all("(, )+</p>", "</p>") %>%
char2html()
x <- c('<table><tbody>', x, '</tbody></table>')
return(x);
}) %>% rev
html_3 <- map2(names(html_2) %>% paste0("<h3>", ., "</h3>"), html_2, c) %>% unlist
html_4 <- c(
paste0('<p><i>Last updated ',
format(Sys.Date(), format="%B %d, %Y"),
' &ndash; Pulled automatically from my <a href="https://scholar.google.com/citations?user=-WJKy_EAAAAJ&hl=en">Google Scholar profile</a>. See <a href="https://thackl.github.io/automatically-update-publications-with-R-scholar" target="_blank">this post</a> for how it works. See the code adapted to my usage <a href = "https://github.com/MaxLarter/maxlarter.github.io/blob/master/.R.Rmd" target="_blank">here</a>.</i></p>'), html_3)
dat <- noquote(readLines("index.html"))  # read data with readLines
dat2 <- noquote(str_replace_all(dat, "[\\r\\n\\t]+", " "))
dat3 <- noquote(str_replace_all(dat2, "[\"]", '"'))
text_to_insert <- html_4
insert_after <- which(dat %in% '\t<div id="main" role="main" class="container">')
insert_before <- grep('<div class="wrapper-footer">', dat3)
insert_line_at <- function(dat, to_insert, insert_after, insert_before){
pre <- dat[1:insert_after]
post <- dat[(insert_before):length(dat)]
return(c(pre, to_insert, post))
}
dat_inserted <- insert_line_at(dat3, text_to_insert, insert_after=insert_after, insert_before = insert_before)
dat_inserted2 = gsub("\u00A0", " ", dat_inserted) # this removes the unbreakable space that appeared for some unkown reason...
writeLines(dat_inserted2, "publications/publications.html") # write to Publication list pages
